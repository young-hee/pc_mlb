/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.8
 * Generated at: 2019-12-23 08:50:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.common.grid;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class colSelector_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n<body class=\"popup-body layer-popup\">\r\n\t<div class=\"popup-head\">\r\n      <p class=\"popup-name\">그리드 조회 항목</p>\r\n      <a href=\"javascript:undefined;\" class=\"close-btn\"></a>\r\n    </div>\r\n    <div class=\"popup-body\">\r\n      <ul class=\"cmm-column-selector\">\r\n        <li class=\"cmm-column-item all active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_000\" checked><label for=\"checkbox_000\">전체</label></span></li>\r\n        <!-- <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_001\" checked><label for=\"checkbox_001\">그리드항목명_1</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_002\" checked><label for=\"checkbox_002\">그리드항목명_2</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_003\" checked><label for=\"checkbox_003\">그리드항목명_3</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_004\" checked><label for=\"checkbox_004\">그리드항목명_4</label></span></li>\r\n");
      out.write("        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_005\" checked><label for=\"checkbox_005\">그리드항목명_5</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_006\" checked><label for=\"checkbox_006\">그리드항목명_6</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_007\" checked><label for=\"checkbox_007\">그리드항목명_7</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_008\" checked><label for=\"checkbox_008\">그리드항목명_8</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_009\" checked><label for=\"checkbox_009\">그리드항목명_9</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_010\" checked><label for=\"checkbox_010\">그리드항목명_10</label></span></li>\r\n");
      out.write("        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_011\" checked><label for=\"checkbox_011\">그리드항목명_11</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_012\" checked><label for=\"checkbox_012\">그리드항목명_12</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_013\" checked><label for=\"checkbox_013\">그리드항목명_13</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_014\" checked><label for=\"checkbox_014\">그리드항목명_14</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_015\" checked><label for=\"checkbox_015\">그리드항목명_15</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_016\" checked><label for=\"checkbox_016\">그리드항목명_16</label></span></li>\r\n");
      out.write("        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_017\" checked><label for=\"checkbox_017\">그리드항목명_17</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_018\" checked><label for=\"checkbox_018\">그리드항목명_18</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_019\" checked><label for=\"checkbox_019\">그리드항목명_19</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_020\" checked><label for=\"checkbox_020\">그리드항목명_20</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_021\" checked><label for=\"checkbox_021\">그리드항목명_21</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_022\" checked><label for=\"checkbox_022\">그리드항목명_22</label></span></li>\r\n");
      out.write("        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_023\" checked><label for=\"checkbox_023\">그리드항목명_23</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_024\" checked><label for=\"checkbox_024\">그리드항목명_24</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_025\" checked><label for=\"checkbox_025\">그리드항목명_25</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_026\" checked><label for=\"checkbox_026\">그리드항목명_26</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_027\" checked><label for=\"checkbox_027\">그리드항목명_27</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_028\" checked><label for=\"checkbox_028\">그리드항목명_28</label></span></li>\r\n");
      out.write("        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_029\" checked><label for=\"checkbox_029\">그리드항목명_29</label></span></li>\r\n        <li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"checkbox_030\" checked><label for=\"checkbox_030\">그리드항목명_30</label></span></li> -->\r\n      </ul>\r\n      <div class=\"buttons-wrap center-bottom\">\r\n        <a href=\"javascript:undefined;\" class=\"btn btn-dgray submit\">저장</a>\r\n        <a href=\"javascript:undefined;\" class=\"btn reset\">취소</a>\r\n      </div>\r\n    </div>\r\n</body>   \r\n  <script>\r\n    $.holdReady(true);\r\n    var timeout = setTimeout(function(){\r\n      // 10초동안 로드 안되면 홀드 풀고 창 닫기\r\n      $.holdReady(false); \r\n      layerWindow.close();\r\n    },10000);\r\n\r\n    $(function(){\r\n      clearTimeout(timeout);\r\n      var cols = layerWindow.options.hidableCols;\r\n\r\n      $('.cmm-column-selector .cmm-column-item:not(.all)').remove();\r\n      for(var col in cols){\r\n        col = cols[col];\r\n        \r\n        var colId = col.id;\r\n");
      out.write("        \r\n        if(colId.indexOf('$') != -1) {\r\n        \tcol.label = '선택';\r\n        }\r\n        \r\n        $('<li class=\"cmm-column-item active\"><span class=\"checkbox\"><input type=\"checkbox\" id=\"' + col.id +'\" ' + (col.hidden? '' : 'checked') + '><label for=\"' + col.id +'\">' + col.label +'</label></span></li>')\r\n          .on('change.checked', 'input[type=checkbox]', (function(col){\r\n            return function(){\r\n              if(this.checked){\r\n                col.hidden = false;\r\n              }\r\n              else{\r\n                col.hidden = true;\r\n              }\r\n            };\r\n          })(col))\r\n          .appendTo($('.cmm-column-selector'));\r\n      }\r\n\r\n      $('.btn.submit').on('click', function(){\r\n        layerWindow.options.grid.setVisibleCols(cols)\r\n        layerWindow.close();\r\n      });\r\n      $('.btn.reset').on('click', function(){\r\n        layerWindow.close();\r\n      });\r\n\r\n      // 스타일\r\n      (function(){\r\n        var setColCss = function(){\r\n          $('.cmm-column-selector .cmm-column-item input[type=checkbox]').each(function(index, chkbox){\r\n");
      out.write("            $(chkbox).parents('.cmm-column-item').toggleClass('active', chkbox.checked);\r\n          });\r\n        };\r\n        setColCss();\r\n\r\n        $('.cmm-column-selector .cmm-column-item:last-child').addClass('last-child');\r\n        $('.cmm-column-selector .cmm-column-item.all input[type=checkbox]').on('change', function(){\r\n          var checked = $(this).get(0).checked;\r\n\r\n          $('.cmm-column-selector .cmm-column-item.all').siblings().find('input[type=checkbox]').each(function(index, chkbox){\r\n            chkbox.checked = checked;\r\n            $(chkbox).trigger('change.checked');\r\n          });\r\n          setColCss();\r\n        })\r\n        .get(0).checked = $('.cmm-column-selector .cmm-column-item:not(.all) input:not(:checked)').length ? false : true;\r\n\r\n        $('.cmm-column-selector .cmm-column-item.all').siblings().find('input[type=checkbox]').on('change', function(){\r\n          var checked = true;\r\n          $('.cmm-column-selector .cmm-column-item.all').siblings().find('input[type=checkbox]').each(function(index, chkbox){\r\n");
      out.write("            if(checked && !this.checked) checked = false;\r\n          });\r\n\r\n          $('.cmm-column-selector .cmm-column-item.all input[type=checkbox]').get(0).checked = checked;\r\n          setColCss();\r\n        });\r\n\r\n        setColCss();\r\n\r\n      })();\r\n    });\r\n  </script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
