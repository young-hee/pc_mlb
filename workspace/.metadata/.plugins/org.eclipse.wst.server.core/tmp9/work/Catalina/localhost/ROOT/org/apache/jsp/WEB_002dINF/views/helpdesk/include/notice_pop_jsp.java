/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.8
 * Generated at: 2019-12-09 06:28:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.helpdesk.include;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class notice_pop_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<script id=\"noticePopupTemplate\" type=\"text/x-jsrender\">\n");
      out.write("    <article id=\"noticePOP-{{:notiSn}}\" class=\"noticeView-pop\"\n");
      out.write("    \t\tstyle=\"top: {{:popupUpendLc||0}}px; left: {{:popupLeftLc||0}}px;\">\n");
      out.write("    \t<section class=\"layer-popupinner\" tabindex=\"0\">\n");
      out.write("    \t\t<div class=\"layer-cont scroll\">\n");
      out.write("\n");
      out.write("    \t\t\t<!-- 내용 -->\n");
      out.write("    \t\t\t{{:pcNotiCont}}\n");
      out.write("    \t\t\t<!-- //내용 -->\n");
      out.write("\n");
      out.write("    \t\t</div>\n");
      out.write("    \t\t<div class=\"popWrapbottom\">\n");
      out.write("    \t\t\t<label class=\"check-skin\">\n");
      out.write("    \t\t\t\t<input type=\"checkbox\" data-noti-sn=\"{{:notiSn}}\" />\n");
      out.write("    \t\t\t\t<span></span>\n");
      out.write("    \t\t\t\t<em>오늘은 그만보기</em>\n");
      out.write("    \t\t\t</label>\n");
      out.write("    \t\t</div>\n");
      out.write("    \t\t<div class=\"layer-popup-close\">\n");
      out.write("    \t\t\t<button type=\"button\" class=\"d_layer_close\" onclick=\"notiClo(this);\">닫기</button>\n");
      out.write("    \t\t</div>\n");
      out.write("    \t</section>\n");
      out.write("    </article>\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("$().ready(function() {\n");
      out.write("\t//layerPopup.popupOpenNow('#noticepop');\n");
      out.write("\n");
      out.write("\t$.ajax('/helpdesk/notice/popupList.ajax', {\n");
      out.write("    \t\ttype: 'get',\n");
      out.write("    \t\tdata: {\n");
      out.write("    \t\t\tsearchExpsrScrinSectCd: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.searchExpsrScrinSectCd}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("' || 'MAIN'\n");
      out.write("    \t\t},\n");
      out.write("    \t})\n");
      out.write("    \t.done(function(rt) {\n");
      out.write("    \t\t$(rt.noticeList).each(function() {\n");
      out.write("    \t\t\tif (getCookie('notice_popup_' + this.notiSn)) {\n");
      out.write("    \t\t\t\treturn;\n");
      out.write("    \t\t\t}\n");
      out.write("    \t\t\t$('.wrap').append($('#noticePopupTemplate').render(this));\n");
      out.write("    \t\t\tlayerPopup.popupOpenNow('#noticePOP-' + this.notiSn);\n");
      out.write("    \t\t\tsetTimeout($.proxy(function() {\n");
      out.write("            \t\t$('#noticePOP-' + this.notiSn + \" .layer-popupinner\")\n");
      out.write("        \t\t\t\t.width($('#noticePOP-' + this.notiSn + \" .layer-cont img\").width());\n");
      out.write("    \t\t\t}, this), 1000);\n");
      out.write("    \t\t\t\n");
      out.write("    \t\t\tif ($('.wrap').is(':contains(.noticeView-pop)')) {\n");
      out.write("    \t\t\t\t$('.contain').off('scroll touchmove mousewheel');\n");
      out.write("    \t\t\t}\n");
      out.write("    \t\t});\n");
      out.write("    \t})\n");
      out.write("    \t.fail(function(e) {\n");
      out.write("    \t\twindow.console && console.log(e);\n");
      out.write("    \t});\n");
      out.write("\n");
      out.write("\t$('body').on('change', '[data-noti-sn]', function() {\n");
      out.write("\t\tif (this.checked) {\n");
      out.write("\t\t\tsetCookie('notice_popup_' + $(this).data('notiSn'), true, 1);\n");
      out.write("\t\t\t$(this).closest('.noticeView-pop')\n");
      out.write("\t\t\t\t.find('.d_layer_close').click();\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("});\n");
      out.write("\n");
      out.write("function notiClo(it) {\n");
      out.write("\t$(it).closest(\".noticeView-pop\").hide();\n");
      out.write("}\n");
      out.write("</script>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
