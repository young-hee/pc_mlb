/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.8
 * Generated at: 2018-06-18 10:56:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member.popup;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class certification_nice_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(14);
    _jspx_dependants.put("/WEB-INF/views/include/jsp-header.jspf", Long.valueOf(1528789763693L));
    _jspx_dependants.put("/WEB-INF/tld/functions.tld", Long.valueOf(1527236566433L));
    _jspx_dependants.put("jar:file:/C:/work/libs/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/work/libs/jstl-1.2.jar!/META-INF/c-1_0-rt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/work/libs/spring-security-taglibs-4.0.0.RELEASE.jar!/META-INF/security.tld", Long.valueOf(1427282480000L));
    _jspx_dependants.put("jar:file:/C:/work/libs/tiles-jsp-3.0.5.jar!/META-INF/tld/tiles-jsp.tld", Long.valueOf(1411309932000L));
    _jspx_dependants.put("jar:file:/C:/work/libs/spring-webmvc-4.1.6.RELEASE.jar!/META-INF/spring-form.tld", Long.valueOf(1427241226000L));
    _jspx_dependants.put("jar:file:/C:/work/libs/spring-webmvc-4.1.6.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1427241226000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-4.0.0.RELEASE.jar", Long.valueOf(1526264865197L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-4.1.6.RELEASE.jar", Long.valueOf(1526264955085L));
    _jspx_dependants.put("/WEB-INF/lib/tiles-jsp-3.0.5.jar", Long.valueOf(1526264975933L));
    _jspx_dependants.put("jar:file:/C:/work/libs/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1526264945904L));
    _jspx_dependants.put("/WEB-INF/tld/taglib.tld", Long.valueOf(1527236566433L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;


	response.setHeader("Cache-Control", "no-store");
	response.setHeader("Pragma", "no-cache");
	response.setDateHeader("Expires", 0);
	if (request.getProtocol().equals("HTTP/1.1")) {
		response.setHeader("Cache-Control", "no-cache");
	}
	com.plgrim.ncp.framework.utils.JSPEnvHelper.setDomainVariables(request, pageContext);

      out.write("<form name=\"gForm\" id=\"gForm\" method=\"post\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${bizNice.actionUrl}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" >\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<script language=\"JavaScript\">\r\n");
      out.write("\t//window.onload 는 $(document).ready 보다 뒤에 실행됨.\r\n");
      out.write("\twindow.onload = function() {\r\n");
      out.write("\t\tend();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction end() {\r\n");
      out.write("\t\tvar certificationDiv = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${bizNice.certificationDiv}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("\t\tvar gForm = $(\"#gForm\");\r\n");
      out.write("\t\t// 휴대폰 본인인증\r\n");
      out.write("\t\tif(certificationDiv === \"PCC\") {\r\n");
      out.write("\t\t\taddHidden(gForm, \"m\", \"checkplusSerivce\");\r\n");
      out.write("\t\t\taddHidden(gForm, \"EncodeData\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${bizNice.reqInfo }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// IPIN 인증\r\n");
      out.write("\t\telse if(certificationDiv === \"IPIN\") {\r\n");
      out.write("\t\t\taddHidden(gForm, \"enc_data\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${bizNice.reqInfo }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse {\r\n");
      out.write("\t\t\talert(\"잘못된 접근입니다. [\" + certificationDiv + \"]\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tdocument.gForm.submit();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t function callbackOpenWindows(checkCertMbr, checkMemberName){\r\n");
      out.write("    \talert(checkMemberName);\r\n");
      out.write("\r\n");
      out.write("    \ttry {\r\n");
      out.write("\t\t\twindow.opener.callbackOpenWindows(checkCertMbr, checkMemberName);\r\n");
      out.write("\t\t} catch (e) {\r\n");
      out.write("\t\t\ttry {\r\n");
      out.write("\t\t\t\topener.callbackOpenWindows(checkCertMbr, checkMemberName);\r\n");
      out.write("\t\t\t} catch (e) {\r\n");
      out.write("\t\t\t\t// \talert(\"Go to Internet Options\\n-> Security tab\\n-> Click on 'Internet' or 'Local intranet' icon\\n-> Check or uncheck the option 'Enable Protected Mode'\\n-> 'Restart IE'\");\r\n");
      out.write("\t\t\t\talert(\"※보안 수준 변경 필요\\n->인터넷 옵션 설정\\n->보안 탭 이동\\n->인터넷 또는 로컬 인트라넷 아이콘 click\\n->보호 모드 사용 check or uncheck\\n->브라우져 재시작\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t \r\n");
      out.write("\tfunction addHidden(f, key, value) {\r\n");
      out.write("\t\tvar el = document.createElement(\"INPUT\");\r\n");
      out.write("\t\tel.type = \"hidden\";\r\n");
      out.write("\t\tel.name = key;\r\n");
      out.write("\t\tel.value = value;\r\n");
      out.write("\r\n");
      out.write("\t\tf.append(el);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
